import os
import json
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import requests
import os
from datetime import datetime
import pytz
from telegram import ParseMode
import textwrap

def format_datetime_ukr(dt: datetime):
    months_ukr = [
        "—Å—ñ—á–Ω—è", "–ª—é—Ç–æ–≥–æ", "–±–µ—Ä–µ–∑–Ω—è", "–∫–≤—ñ—Ç–Ω—è", "—Ç—Ä–∞–≤–Ω—è", "—á–µ—Ä–≤–Ω—è",
        "–ª–∏–ø–Ω—è", "—Å–µ—Ä–ø–Ω—è", "–≤–µ—Ä–µ—Å–Ω—è", "–∂–æ–≤—Ç–Ω—è", "–ª–∏—Å—Ç–æ–ø–∞–¥–∞", "–≥—Ä—É–¥–Ω—è"
    ]
    return f"{dt.day} {months_ukr[dt.month - 1]} {dt.year}, {dt.strftime('%H:%M')}"

json_path = "data.json"

# –Ø–∫—â–æ —Ñ–∞–π–ª—É –Ω–µ–º–∞—î ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑ –±–∞–∑–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
if not os.path.exists(json_path):
    data = {
        "name": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
        "title": "–ú—ñ–π –©–æ–¥–µ–Ω–Ω–∏–∫ –Ü–Ω—Ç—É—ó—Ü—ñ—ó",
        "entries": []
    }
    with open(json_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
else:
    # –Ø–∫—â–æ —Ñ–∞–π–ª —î ‚Äî –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
    with open(json_path, "r", encoding="utf-8") as f:
        data = json.load(f)

def download_image(url, filename):
    response = requests.get(url)
    if response.status_code == 200:
        with open(filename, "wb") as f:
            f.write(response.content)
        return filename
    return None

# –§–æ–ª–¥–µ—Ä–∏
DATA_FOLDER = "data"
PDF_FOLDER = "pdf"
os.makedirs(DATA_FOLDER, exist_ok=True)
os.makedirs(PDF_FOLDER, exist_ok=True)

# –®–ª—è—Ö–∏ –¥–æ —à—Ä–∏—Ñ—Ç—É —Ç–∞ —Ñ–æ–Ω—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –ø—ñ–∑–Ω—ñ—à–µ –≤ PDF)
FONT_PATH = "DejaVuSans.ttf"
BACKGROUND_IMAGE = "paporot.jpg"

# –ó–∞–ø–∏—Ç–∞–Ω–Ω—è
MORNING_QUESTIONS = [
    "‚òÄÔ∏è –Ø–∫ —è —Å—å–æ–≥–æ–¥–Ω—ñ –ø—Ä–æ–∫–∏–Ω—É–ª–∞—Å—å/–ø—Ä–æ–∫–∏–Ω—É–≤—Å—è?",
    "‚ú® –Ø–∫–∏–π –ø–µ—Ä—à–∏–π –æ–±—Ä–∞–∑ –∞–±–æ –¥—É–º–∫–∞ –∑‚Äô—è–≤–∏–ª–∞—Å—è –ø—ñ—Å–ª—è –ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è?",
    "üçµ –©–æ –º–µ–Ω—ñ —Ö–æ—á–µ—Ç—å—Å—è —Å—å–æ–≥–æ–¥–Ω—ñ –¥–ª—è —Ç—ñ–ª–∞?",
    "‚ù§Ô∏è –Ø–∫–∏–π –º—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π –∑–∞—Ä–∞–∑?",
    "üìì –©–æ –º–µ–Ω—ñ —Ö–æ—á–µ—Ç—å—Å—è —Å—å–æ–≥–æ–¥–Ω—ñ –∑—Ä–æ–±–∏—Ç–∏ –ø–µ—Ä—à –∑–∞ –≤—Å–µ?",
    "üí° –Ø–∫–µ –≥–æ–ª–æ–≤–Ω–µ –±–∞–∂–∞–Ω–Ω—è –Ω–∞ —Ü–µ–π –¥–µ–Ω—å?",
    "üîç –ù–∞ —â–æ —è —Ö–æ—á—É –∑–≤–µ—Ä–Ω—É—Ç–∏ —É–≤–∞–≥—É —Å—å–æ–≥–æ–¥–Ω—ñ?",
    "üåø –ß–æ–≥–æ —è —Ö–æ—á—É —É–Ω–∏–∫–Ω—É—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?",
    "üî• –©–æ –Ω–∞–¥–∏—Ö–∞—î –º–µ–Ω–µ —Ü—å–æ–≥–æ —Ä–∞–Ω–∫—É?",
    "‚òï –ß–æ–≥–æ –ø–æ—Ç—Ä–µ–±—É—î –º–æ—è –¥—É—à–∞ —Å—å–æ–≥–æ–¥–Ω—ñ?",
    "üßò –Ø–∫ —è –º–æ–∂—É –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤—ñ–π –µ–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω?",
    "üïäÔ∏è –ß–∏ —Ö–æ—á—É —è —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–∏—à—ñ —á–∏ —Ä—É—Ö—É?",
    "üé® –£ —è–∫–∏–π –∫–æ–ª—ñ—Ä —è –± –ø–æ—Ñ–∞—Ä–±—É–≤–∞–ª–∞/–ø–æ—Ñ–∞—Ä–±—É–≤–∞–≤ —Å–≤—ñ–π –¥–µ–Ω—å?",
    "üìñ –Ø–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—è —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ–≥–æ –¥–Ω—è —Ö–æ—á–µ –±—É—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–∞?",
    "‚è≥ –©–æ –≤–∞–∂–ª–∏–≤–æ –≤—Å—Ç–∏–≥–Ω—É—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ —Å–∞–º–µ –¥–ª—è –º–µ–Ω–µ?",
    "üß© –Ø–∫–∏–π –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –ø–∞–∑–ª —Ö–æ—á–µ —Å–∫–ª–∞—Å—Ç–∏—Å—è —Å—å–æ–≥–æ–¥–Ω—ñ?",
    "üåà –Ø–∫ —è –º–æ–∂—É –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ —Ä–∞–¥–æ—Å—Ç—ñ —É —Å–≤—ñ–π –¥–µ–Ω—å?",
    "üéØ –Ø–∫–∏–π –º—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π —Ñ–æ–∫—É—Å –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ?",
    "üéà –ß–∏–º —è –º–æ–∂—É —Å–µ–±–µ –ø–æ—Ç—ñ—à–∏—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?",
    "üå¨Ô∏è –©–æ –º–µ–Ω—ñ –≤–∞—Ä—Ç–æ –≤—ñ–¥–ø—É—Å—Ç–∏—Ç–∏ –∑ —Ä–∞–Ω–∫—É?",
    "üíå –Ø–∫–µ –ø–æ—Å–ª–∞–Ω–Ω—è —è —Ö–æ—á—É –ø–µ—Ä–µ–¥–∞—Ç–∏ —Å–æ–±—ñ –Ω–∞ –¥–µ–Ω—å?",
    "üîë –Ø–∫–µ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –º–æ–≥–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ–≥–æ –¥–Ω—è?",
    "üõ°Ô∏è –Ø–∫ —è –º–æ–∂—É —Å–µ–±–µ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏, —è–∫—â–æ —Å—Ç–∞–Ω–µ –≤–∞–∂–∫–æ?",
    "üß≠ –Ø–∫–∏–π –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –∫–æ–º–ø–∞—Å –≤–µ–¥–µ –º–µ–Ω–µ —Å—å–æ–≥–æ–¥–Ω—ñ?",
    "üåû –£ —á–æ–º—É —è –º–æ–∂—É –ø—Ä–æ—è–≤–∏—Ç–∏ —Å–µ–±–µ —Å–ø—Ä–∞–≤–∂–Ω—å–æ —Å—å–æ–≥–æ–¥–Ω—ñ?",
    "ü™Ñ –Ø–∫–µ –º–∞–ª–µ–Ω—å–∫–µ –¥–∏–≤–æ —è –≥–æ—Ç–æ–≤–∞/–≥–æ—Ç–æ–≤–∏–π –ø–æ–º—ñ—Ç–∏—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?",
    "üí≠ –Ø–∫–∞ –¥—É–º–∫–∞ –∑–∞—Ä–∞–∑ –∑–≤—É—á–∏—Ç—å –Ω–∞–π–≥—É—á–Ω—ñ—à–µ?",
    "üß∂ –©–æ —Ö–æ—á–µ —Ä–æ–∑–ø–ª—É—Ç–∞—Ç–∏—Å—å –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –º–µ–Ω–µ —Å—å–æ–≥–æ–¥–Ω—ñ?",
    "üå± –Ø–∫–µ –Ω–æ–≤–µ –∑–µ—Ä–Ω—è—Ç–∫–æ —è –º–æ–∂—É –ø–æ—Å–∞–¥–∏—Ç–∏ –≤ —Å–æ–±—ñ —Å—å–æ–≥–æ–¥–Ω—ñ?",
    "‚ú® –Ø–∫—É —á–∞—Ä—ñ–≤–Ω—É –¥—ñ—é —è –º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –¥–ª—è —Å–µ–±–µ –∞–±–æ —Å–≤—ñ—Ç—É?"
] # —Å—é–¥–∏ –ø–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫
EVENING_QUESTIONS = [
    "üåô –Ø–∫ –ø—Ä–æ–π—à–æ–≤ –º—ñ–π –¥–µ–Ω—å?",
    "üõèÔ∏è –Ø–∫–∏–π –º–æ–º–µ–Ω—Ç –¥–Ω—è –±—É–≤ –¥–ª—è –º–µ–Ω–µ –Ω–∞–π—Ç–µ–ø–ª—ñ—à–∏–º?",
    "üåü –©–æ —Å—å–æ–≥–æ–¥–Ω—ñ –ø–æ–¥–∞—Ä—É–≤–∞–ª–æ –º–µ–Ω—ñ —É—Å–º—ñ—à–∫—É?",
    "üí§ –©–æ –≤—Ç–æ–º–∏–ª–æ –º–µ–Ω–µ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–∞–π–±—ñ–ª—å—à–µ?",
    "üïØÔ∏è –©–æ —è —Å—å–æ–≥–æ–¥–Ω—ñ —É—Å–≤—ñ–¥–æ–º–∏–ª–∞/—É—Å–≤—ñ–¥–æ–º–∏–≤?",
    "üìò –ß–æ–≥–æ —è –Ω–∞–≤—á–∏–ª–∞—Å—å/–Ω–∞–≤—á–∏–≤—Å—è —Å—å–æ–≥–æ–¥–Ω—ñ?",
    "‚ù§Ô∏è –©–æ —Å—å–æ–≥–æ–¥–Ω—ñ –ø–æ—Ç—ñ—à–∏–ª–æ –º–æ—î —Å–µ—Ä—Ü–µ?",
    "üíß –ß–∏ –±—É–ª–æ —â–æ—Å—å, —â–æ –∑–∞—á–µ–ø–∏–ª–æ –∞–±–æ –∑–∞—Å–º—É—Ç–∏–ª–æ?",
    "üåà –©–æ —è –º–æ–∂—É –≤—ñ–¥–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º?",
    "üéÅ –Ø–∫–∏–π –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –ø–æ–¥–∞—Ä—É–Ω–æ–∫ —è –æ—Ç—Ä–∏–º–∞–ª–∞/–æ—Ç—Ä–∏–º–∞–≤ —Å—å–æ–≥–æ–¥–Ω—ñ?",
    "‚ú® –©–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–µ–Ω—å –¥–æ–¥–∞–≤ –¥–æ –º–æ–≥–æ –∂–∏—Ç—Ç—è?",
    "üîÆ –ß–∏ –≤—ñ–¥—á—É–≤–∞–ª–∞/–≤—ñ–¥—á—É–≤–∞–≤ —è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ—Å—Ç—å –∞–±–æ –∑–Ω–∞–∫?",
    "üåå –Ø–∫ —è –∑–∞—Ä–∞–∑ –ø–æ—á—É–≤–∞—é—Å—è —Ñ—ñ–∑–∏—á–Ω–æ?",
    "üß† –Ø–∫–∞ –¥—É–º–∫–∞ –Ω–µ —Ö–æ—á–µ –∑–∞–ª–∏—à–∏—Ç–∏ –º–µ–Ω–µ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º?",
    "üí≠ –ü—Ä–æ —â–æ —è –¥—É–º–∞—é –ø–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –∑–∞—Å–Ω—É—Ç–∏?",
    "ü™û –Ø–∫ —è –±–∞—á–∏–ª–∞/–±–∞—á–∏–≤ —Å–µ–±–µ —Å—å–æ–≥–æ–¥–Ω—ñ?",
    "üß° –Ø–∫ —è —Å—å–æ–≥–æ–¥–Ω—ñ –ø—Ä–æ—è–≤–∏–ª–∞/–ø—Ä–æ—è–≤–∏–≤ –ª—é–±–æ–≤ –¥–æ —Å–µ–±–µ?",
    "üåí –ß–∏ –±—É–ª–æ —â–æ—Å—å, —â–æ —è –Ω–µ –≤—Å—Ç–∏–≥–ª–∞/–Ω–µ –≤—Å—Ç–∏–≥ –∑—Ä–æ–±–∏—Ç–∏ ‚Äî —ñ —è–∫ –∑ —Ü–∏–º –∑–∞—Ä–∞–∑?",
    "ü´ß –Ø–∫–µ –±–∞–∂–∞–Ω–Ω—è –∑‚Äô—è–≤–∏–ª–æ—Å—è –≤–≤–µ—á–µ—Ä—ñ?",
    "üéà –ß–∏ —Ö–æ—á—É —è –ø–æ–¥—è–∫—É–≤–∞—Ç–∏ —Å–æ–±—ñ –∑–∞ —â–æ—Å—å —Å—å–æ–≥–æ–¥–Ω—ñ?",
    "üå† –Ø–∫–∞ –ø–æ–¥—ñ—è –¥–Ω—è –∑–¥–∞—î—Ç—å—Å—è –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–æ—é?",
    "üîç –©–æ —è –ø–æ–º—ñ—Ç–∏–ª–∞/–ø–æ–º—ñ—Ç–∏–≤ —É —Å–≤–æ—î–º—É –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–º—É —Å–≤—ñ—Ç—ñ?",
    "üìø –Ø–∫—É –ø—Ä–∞–∫—Ç–∏–∫—É —è –∑—Ä–æ–±–∏–ª–∞/–∑—Ä–æ–±–∏–≤ –¥–ª—è —Å–µ–±–µ —Å—å–æ–≥–æ–¥–Ω—ñ?",
    "üíå –Ø–∫–µ –ø–æ—Å–ª–∞–Ω–Ω—è —è –± —Ö–æ—Ç—ñ–ª–∞/—Ö–æ—Ç—ñ–≤ –∑–∞–ª–∏—à–∏—Ç–∏ —Å–æ–±—ñ –Ω–∞ –Ω—ñ—á?",
    "üåô –Ø–∫ —è –º–æ–∂—É –æ–±—ñ–π–Ω—è—Ç–∏ —Å–µ–±–µ –∑–∞—Ä–∞–∑?",
    "üåä –Ø–∫–∏–π –Ω–∞—Å—Ç—Ä—ñ–π –≤–µ—á–æ—Ä–∞?",
    "üìñ –ß–∏ —Ö–æ—á—É —è —â–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç–∏, —â–æ–± –≤—ñ–¥–ø—É—Å—Ç–∏—Ç–∏ —Ü–µ –∑ –¥—É–º–æ–∫?",
    "ü™∑ –©–æ —è –º–æ–∂—É –≤–∑—è—Ç–∏ –∑ —Ü—å–æ–≥–æ –¥–Ω—è –≤ –º–∞–π–±—É—Ç–Ω—î?",
    "üïäÔ∏è –Ø–∫–∏–π –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Å—Ç–∞–Ω —è —Ö–æ—á—É –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ —Å–æ–Ω?",
    "‚≠ê –Ø–∫–∏–π –ø—ñ–¥—Å—É–º–æ–∫ –º–æ–≥–æ –¥–Ω—è –≤ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—ñ –∞–±–æ –æ–±—Ä–∞–∑—ñ?"
]

# –ö–∞—Ä—Ç–∏
CARDS = [
    {"number": 1, "name": "–ü–æ—Ä–æ–∂–Ω—ñ–π –ø—Ä–æ—Å—Ç—ñ—Ä", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/porojnijprostir.jpg"},
    {"number": 2, "name": "–ù–∞ —Ä–æ–∑–¥–æ—Ä—ñ–∂–∂—ñ", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/narozdorijji.jpg"},
    {"number": 3, "name": "–ó–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–æ –Ω–µ–±–∞", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/zapytannyadoneba.jpg"},
    {"number": 4, "name": "–î–∑–µ—Ä–∫–∞–ª–æ –í—Å–µ—Å–≤—ñ—Ç—É", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/dzerkalovsvesvitu.jpg"},
    {"number": 5, "name": "–ü–æ—Ä–æ–∂–Ω—è –∫–Ω–∏–≥–∞", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/porojnakniga.jpg"},
    {"number": 6, "name": "–¢—ñ–Ω—å, —â–æ –≥–æ–≤–æ—Ä–∏—Ç—å", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/tishogovorit.jpg"},
    {"number": 7, "name": "–õ–µ–≥–∫–∏–π –≤—ñ—Ç–µ—Ä–µ—Ü—å", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/legkiyviterets.jpg"},
    {"number": 8, "name": "–°—Ç–µ–∂–∫–∞ —Å–≤—ñ—Ç–ª–∞", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/steckasvitla.jpg"},
    {"number": 9, "name": "–î–æ—Ç–∏–∫ –¥–æ –Ω–µ–≤–∏–¥–∏–º–æ–≥–æ", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/dotikdonevudumogo.jpg"},
    {"number": 10, "name": "–ì–æ–ª–æ—Å –≤—ñ–¥–ª—É–Ω–Ω—è", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/vidlunnagolosu.jpg"},
    {"number": 11, "name": "–ù–µ–∑–Ω–∞–π–æ–º–µ –æ–±–ª–∏—á—á—è", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/neznajomeoblicha.jpg"},
    {"number": 12, "name": "–î–≤–µ—Ä—ñ, —è–∫–∏—Ö –Ω–µ –±—É–ª–æ", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/dveryakihnebulo.jpg"},
    {"number": 13, "name": "–ö–ª—é—á –±–µ–∑ –∑–∞–º–∫–∞", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/kluchbezzamka.jpg"},
    {"number": 14, "name": "–°–ª—ñ–¥–∏ –Ω–µ–≤–∏–¥–∏–º–æ–≥–æ", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/slidichasu.jpg"},
    {"number": 15, "name": "–¢—ñ–Ω—ñ —É —Ç—É–º–∞–Ω—ñ", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/tiniytumani.jpg"},
    {"number": 16, "name": "–ü–æ—Å–ª–∞–Ω–Ω—è —Ö–≤–∏–ª—å", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/poslannahvil.jpg"},
    {"number": 17, "name": "–ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–µ —Ç–µ–ø–ª–æ", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/nespodivaneteplo.jpg"},
    {"number": 18, "name": "–ó–∞–±—É—Ç–∏–π —Å–ø–æ–≥–∞–¥", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/zabutyispogad.jpg"},
    {"number": 19, "name": "–ù–µ–≤—ñ–¥–æ–º–∏–π –∑–Ω–∞–∫", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/nevidomijznak.jpg"},
    {"number": 20, "name": "–ó—É–ø–∏–Ω–µ–Ω–∏–π —á–∞—Å", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/zupynenichas.jpg"},
    {"number": 21, "name": "–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –≤–æ–≥–æ–Ω—å", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/vnutrishniyvogon.jpg"},
    {"number": 22, "name": "–û–∂–∏–≤–ª–µ–Ω–Ω—è", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/ogivlenna.jpg"},
    {"number": 23, "name": "–î–æ–∑–≤—ñ–ª –ª–µ—Ç—ñ—Ç–∏", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/dozvilzletity.jpg"},
    {"number": 24, "name": "–ú–∏—Ç—å –ø–µ—Ä–µ–¥ –ø–µ—Ä—à–∏–º –∑–≤—É–∫–æ–º", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/mitperedpershimzvukom.jpg"},
    {"number": 25, "name": "–¢–∞–Ω–µ–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/tanennarealnosty.jpg"},
    {"number": 26, "name": "–†–æ–∑–ø–∞–¥ —ñ–ª—é–∑—ñ–π", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/rozpadilyziy.jpg"},
    {"number": 27, "name": "–ü–∞—Å—Ç–∫–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/pastkamojlivostey.jpg"},
    {"number": 28, "name": "–ü–æ—Å–ª–∞–Ω–Ω—è –≤—Å–µ—Å–≤—ñ—Ç—É", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/poslannavsesvity.jpg"},
    {"number": 29, "name": "–°–∫–ª—è–Ω–∞ —Å—Ç—ñ–Ω–∞", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/sklanastina.jpg"},
    {"number": 30, "name": "–í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Å–µ–Ω—Å—É", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/vidkryttasensu.jpg"},
    {"number": 31, "name": "–ú–∞–≥—ñ—è —É –∑–≤–∏—á–∞–π–Ω–æ–º—É", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/magiyauzvichainomu.jpg"},
    {"number": 32, "name": "–í–∞–≥–∞ –Ω–µ–º–æ–∂–ª–∏–≤–æ–≥–æ", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/vaganemojlivogo.jpg"},
    {"number": 33, "name": "–ö—Ä–∞–ø–ª—è —É—Å–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/krapliausvidomlenna.jpg"},
    {"number": 34, "name": "–ü–µ—Ä–µ–∫—Ä—É—á–µ–Ω–∏–π —Å–≤—ñ—Ç", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/perrkruchenijsvit.jpg"},
    {"number": 35, "name": "–ï—Ö–æ –∑–Ω–∞–∫—ñ–≤", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/ehoznakiv.jpg"},
    {"number": 36, "name": "–°–ª—ñ–¥–∏ —Ä—É–π–Ω—É–≤–∞–Ω–Ω—è", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/sludiruunuvanna.jpg"},
    {"number": 37, "name": "–ú—É–∑–∏–∫–∞, —â–æ –ª—É–Ω–∞—î –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/muzykasholunaevseredini.jpg"},
    {"number": 38, "name": "–ü—Ä–∏–º–∞—Ä–Ω–∏–π –≤—ñ–¥–±–∏—Ç–æ–∫", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/prymarnyvidbitok.jpg"},
    {"number": 39, "name": "–†–æ–∑—ñ—Ä–≤–∞–Ω–∏–π —Ä–∏—Ç–º", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/rozirvaniyrytm.jpg"},
    {"number": 40, "name": "–¢–æ–Ω–∫–∞ –º–µ–∂–∞ –º—ñ–∂ —Å–Ω–∞–º–∏", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/mejamijsnamu.jpg"},
    {"number": 41, "name": "–õ–µ–¥—å –≤—ñ–¥—á—É—Ç–Ω–∞ –∑–º—ñ–Ω–∞", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/ledpomitnizminy.jpg"},
    {"number": 42, "name": "–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/nezavershenaistoriya.jpg"},
    {"number": 43, "name": "–ü—Ä–æ–ø—É—â–µ–Ω—ñ —à–ª—è—Ö–∏", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/propyshenishlahi.jpg"},
    {"number": 44, "name": "–ú—ñ–Ω–ª–∏–≤–∞ –¥–æ—Ä–æ–≥–∞", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/minlivadoroga.jpg"},
    {"number": 45, "name": "–°–ª—ñ–¥–∏ —á–∞—Å—É", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/slidichasu.jpg"},
    {"number": 46, "name": "–ú–æ–º–µ–Ω—Ç –∑–º—ñ–Ω", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/perelomnamit.jpg"},
    {"number": 47, "name": "–ì–ª–∏–±–æ–∫–∞ —Ç–∏—à–∞", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/glibikatisha.jpg"},
    {"number": 48, "name": "–û—Å—è—è–Ω–Ω—è", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/osayanna.jpg"},
    {"number": 49, "name": "–í—ñ–¥–∫—Ä–∏—Ç—Ç—è —ñ—Å—Ç–∏–Ω–∏", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/vidobragennaistini.jpg"},
    {"number": 50, "name": "–î–æ—Ç–∏–∫ –∑–µ–º–ª—ñ", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/dotikzemli.jpg"},
    {"number": 51, "name": "–ú–æ–º–µ–Ω—Ç –≥–∞—Ä–º–æ–Ω—ñ—ó", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/momentgarmonii.jpg"},
    {"number": 52, "name": "–£ —Ä–∏—Ç–º—ñ –≤–æ–¥–∏", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/uritmivodi.jpg"},
    {"number": 53, "name": "–°–ø–æ–∫—ñ–π —É –¥–æ–≤—ñ—Ä—ñ", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/spokiyudoviri.jpg"},
    {"number": 54, "name": "–ì–æ–ª–æ—Å —Å–µ—Ä—Ü—è", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/golosserca.jpg"},
    {"number": 55, "name": "–Ñ–¥–Ω—ñ—Å—Ç—å", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/ednist.jpg"},
    {"number": 56, "name": "–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –Ω–∞–ø—Ä—è–º–æ–∫", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/vnutrishniynapramok.jpg"},
    {"number": 57, "name": "–í–∏–±—É—Ö –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/vibuhnathnenna.jpg"},
    {"number": 58, "name": "–ó–∞ –º–µ–∂–∞–º–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç—É", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/zamejamugorizontu.jpg"},
    {"number": 59, "name": "–ü—É–ª—å—Å–∞—Ü—ñ—è –≤—Å–µ—Å–≤—ñ—Ç—É", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/pulsaciyavsvesvitu.jpg"},
    {"number": 60, "name": "–í—ñ–¥–∫—Ä–∏—Ç—ñ –¥–≤–µ—Ä—ñ", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/vidkritidveri.jpg"},
    {"number": 61, "name": "–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–∏–Ω–∏", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/vidobragennaistini.jpg"},
    {"number": 62, "name": "–ü–æ—Ç—ñ–∫ —Å–≤–æ–±–æ–¥–∏", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/potiksvobodi.jpg"},
    {"number": 63, "name": "–†–µ–∑–æ–Ω–∞–Ω—Å —ñ–∑ –≤—Å–µ—Å–≤—ñ—Ç–æ–º", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/rezonanszvsesvitom.jpg"},
    {"number": 64, "name": "–í—ñ–¥–ª—É–Ω–Ω—è –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/vidlunnagolosu.jpg"},
    {"number": 65, "name": "–õ–µ–≥–∫–∞ —Ö–æ–¥–∞ –¥–æ–ª—ñ", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/legkahodadoli.jpg"},
    {"number": 66, "name": "–¢–µ–ø–ª–æ —É –¥–æ—â—ñ", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/teploudoshi.jpg"},
    {"number": 67, "name": "–û–∫–æ —à—Ç–æ—Ä–º—É", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/okoshtormu.jpg"},
    {"number": 68, "name": "–ü—Ä–∏—Å—É—Ç–Ω—ñ—Å—Ç—å —É –º–æ–º–µ–Ω—Ç—ñ", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/prisutnistymomenti.jpg"},
    {"number": 69, "name": "–ü–æ–¥–∏—Ö —Å–≤–æ–±–æ–¥–∏", "image_url": "https://raw.githubusercontent.com/Alona2503/Pdf_bot/main/images/duhannavoli.jpg"}
]
def get_user_file(user_id):
    return os.path.join(DATA_FOLDER, f"{user_id}.json")
def load_user_data(user_id):
    file_path = get_user_file(user_id)
    if not os.path.exists(file_path):
        data = {
            "name": "",
            "title": "",
            "entries": [],
            "used_morning": [],
            "used_evening": [],
            "card_date": "",
            "card_info": {}
        }
        save_user_data(user_id, data)
    else:
        with open(file_path, "r", encoding="utf-8") as f:
            data = json.load(f)
    return data

def save_user_data(user_id, data):
    file_path = get_user_file(user_id)
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def add_entry(user_id, entry_type, content):
    data = load_user_data(user_id)
    data["entries"].append({
        "type": entry_type,
        "content": content,
        "timestamp": datetime.now(pytz.timezone("Europe/Kyiv")).isoformat()
    })
    save_user_data(user_id, data)
def start(update: Update, context: CallbackContext):
    welcome_message = (
        "üåø –í—ñ—Ç–∞—é —Ç–µ–±–µ —É –ø—Ä–æ—Å—Ç–æ—Ä—ñ –©–æ–¥–µ–Ω–Ω–∏–∫–∞ –Ü–Ω—Ç—É—ó—Ü—ñ—ó!\n"
        "‚Äî –º—ñ—Å—Ü—ñ, –¥–µ –Ω–∞—Ä–æ–¥–∂—É—î—Ç—å—Å—è —á—É—Ç—Ç—è, –≥–ª–∏–±–∏–Ω–∞ –π –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Å–ø–æ–∫—ñ–π.\n\n"
        "ü™Ñ –¶–µ–π —â–æ–¥–µ–Ω–Ω–∏–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π, —â–æ–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–±–µ –Ω–∞ —à–ª—è—Ö—É –¥–æ —Å–µ–±–µ.\n"
        "–¢—É—Ç –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–æ—é ‚Äî –ª–∏—à–µ —á–µ—Å–Ω–æ—é –∑ —Å–æ–±–æ—é, –Ω—ñ–∂–Ω–æ—é, —É–≤–∞–∂–Ω–æ—é.\n\n"
        "‚ú® –©–æ—Ä–∞–Ω–∫—É —ñ —â–æ–≤–µ—á–æ—Ä–∞ —Ç–∏ –∑–º–æ–∂–µ—à —á—É—Ç–∏ —Å–µ–±–µ –∫—Ä–∞—â–µ: –ø–æ–º—ñ—á–∞—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π, —Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ –¥—É–º–∫–∏,\n"
        "–ª–æ–≤–∏—Ç–∏ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è –π –∑–≤–µ—Ä—Ç–∞—Ç–∏ —É–≤–∞–≥—É –Ω–∞ —Å–≤–æ—ó —Å–ø—Ä–∞–≤–∂–Ω—ñ –±–∞–∂–∞–Ω–Ω—è.\n\n"
        "üÉè –û—Å–æ–±–ª–∏–≤–µ –º—ñ—Å—Ü–µ –∑–∞–π–º–∞—é—Ç—å –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–Ω—ñ –∫–∞—Ä—Ç–∏ ‚Äî –≤–æ–Ω–∏ –º–æ–≤—á–∞–∑–Ω—ñ –¥—Ä—É–∑—ñ, —è–∫—ñ –Ω–µ –¥–∞—é—Ç—å –ø–æ—Ä–∞–¥,\n"
        "–∞ –Ω–∞—Ç—è–∫–∞—é—Ç—å –æ–±—Ä–∞–∑–∞–º–∏. –í–æ–Ω–∏ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å –ø–æ–±–∞—á–∏—Ç–∏ —Ç–µ, —â–æ –≤–∂–µ —î –≤ —Ç–æ–±—ñ, –∞–ª–µ –∑–∞–ª–∏—à–∞–ª–æ—Å—å –±–µ–∑ —É–≤–∞–≥–∏.\n\n"
        "üìì –¶–µ–π —â–æ–¥–µ–Ω–Ω–∏–∫ ‚Äî –ø—Ä–æ—Å—Ç—ñ—Ä —Ç–≤–æ–≥–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ —Å–≤—ñ—Ç—É. –ú—ñ—Å—Ü–µ, –¥–µ –º–æ–∂–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç–∏ —â–∏—Ä–æ.\n"
        "–î–µ —Ç–≤–æ—ó —Å–ª–æ–≤–∞ –º–∞—é—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è. –î–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —á–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ.\n\n"
        "‚ù§Ô∏è –¢—É—Ç –≤–∞–∂–ª–∏–≤–µ –ª–∏—à–µ –æ–¥–Ω–µ ‚Äî —Ç–∏.\n\n"
        "üìå –ê —â–µ ‚Äî —è–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –≤ —Ü—å–æ–º—É –ø—Ä–æ—Å—Ç–æ—Ä—ñ?\n"
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ—î —ñ–º‚Äô—è –∞–±–æ –ø—Å–µ–≤–¥–æ–Ω—ñ–º, —è–∫–∏–º —Ç–∏ —Ö–æ—á–µ—à –ø—ñ–¥–ø–∏—Å–∞—Ç–∏ —Ü–µ–π —â–æ–¥–µ–Ω–Ω–∏–∫:"
    )
    update.message.reply_text(welcome_message)
    context.user_data["state"] = "waiting_name"

def handle_text(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    data = load_user_data(user_id)
    text = update.message.text
    state = context.user_data.get("state")

    if state == "waiting_name":
        data["name"] = text
        save_user_data(user_id, data)
        name_reply = (
        "‚ú® –ß—É–¥–æ–≤–æ!\n"
        "–ê —Ç–µ–ø–µ—Ä –¥–∞–≤–∞–π –ø—Ä–∏–¥—É–º–∞—î–º–æ –Ω–∞–∑–≤—É –¥–ª—è —Ç–≤–æ–≥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞.\n"
        "–¶–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω—ñ–∂–Ω–µ —Å–ª–æ–≤–æ, –º–µ—Ç–∞—Ñ–æ—Ä–∞, —Ñ—Ä–∞–∑–∞ –∞–±–æ –ø—Ä–æ—Å—Ç–æ —â–æ—Å—å, —â–æ –≤—ñ–¥–∫–ª–∏–∫–∞—î—Ç—å—Å—è —Å–∞–º–µ –∑–∞—Ä–∞–∑.\n\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: ¬´–®–µ–ø—ñ—Ç —Å–µ—Ä—Ü—è¬ª, ¬´–ú—ñ–π –ø—Ä–æ—Å—Ç—ñ—Ä¬ª, ¬´–°–≤—ñ—Ç–ª–æ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ¬ª, ¬´–ü–æ–¥–æ—Ä–æ–∂ –¥–æ —Å–µ–±–µ¬ª‚Ä¶\n\n"
        "üñãÔ∏è –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É, —è–∫–∞ —Å—Ç–∞–Ω–µ –ø—ñ–¥–ø–∏—Å–æ–º –Ω–∞ –æ–±–∫–ª–∞–¥–∏–Ω—Ü—ñ —Ç–≤–æ–≥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞:"
    )
        update.message.reply_text(name_reply)
        context.user_data["state"] = "waiting_title"
    elif state == "waiting_title":
        data["title"] = text
        save_user_data(user_id, data)
        context.user_data["state"] = None

        final_text = (
        f"üìì –ì–æ—Ç–æ–≤–æ! –¢–≤—ñ–π —â–æ–¥–µ–Ω–Ω–∏–∫ ¬´{data['title']}¬ª —Å—Ç–≤–æ—Ä–µ–Ω–æ.\n\n"
        "üåü –¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –≤–∏—Ä—É—à–∏—Ç–∏ —É –º–∞–Ω–¥—Ä—ñ–≤–∫—É –¥–æ —Å–µ–±–µ ‚Äî —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞, –æ–±—Ä–∞–∑–∏, –≤—ñ–¥—á—É—Ç—Ç—è.\n"
        "–î–æ–≤—ñ—Ä—è–π –∫–æ–∂–Ω–æ–º—É –∫—Ä–æ–∫—É —ñ –Ω–µ –ø–æ—Å–ø—ñ—à–∞–π: —É—Å–µ, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äî –≤–∂–µ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ç–µ–±–µ.\n\n"
        "üß≠ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /help, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, –∑ —á–æ–≥–æ –ø–æ—á–∞—Ç–∏ —Ç–∞ —è–∫—ñ —î –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —â–æ–¥–µ–Ω–Ω–∏–∫–æ–º."
    )
    update.message.reply_text(final_text)
    
def reset_profile(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    filename = f"data/user_{user_id}.json"

    if os.path.exists(filename):
        os.remove(filename)
        update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ—Ñ—ñ–ª—å –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–µ–Ω–æ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—î —ñ–º‚Äô—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—á–∞—Ç–∫—É:")
        context.user_data.clear()
    else:
        update.message.reply_text("–ü—Ä–æ—Ñ—ñ–ª—å —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ.")

def help_command(update: Update, context: CallbackContext):
    update.message.reply_text(
        "üìñ *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –©–æ–¥–µ–Ω–Ω–∏–∫–∞ –Ü–Ω—Ç—É—ó—Ü—ñ—ó:*\n\n"
        "üÉè */card* ‚Äî –≤–∏—Ç—è–≥–Ω–∏ –∫–∞—Ä—Ç—É –¥–Ω—è. –í–æ–Ω–∞ –¥–æ–ø–æ–º–æ–∂–µ –∫—Ä–∞—â–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏—Å—è –Ω–∞ –¥–µ–Ω—å, –≤—ñ–¥—á—É—Ç–∏ –Ω–∞–ø—Ä—è–º –∞–±–æ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è.\n\n"
        "üåÖ */morning* ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ä–∞–Ω–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è. –î–æ–ø–æ–º–∞–≥–∞—é—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏—Å—è –Ω–∞ –¥–µ–Ω—å, –ø–æ—á—É—Ç–∏ —Å–µ–±–µ —Ç–∞ —É—Å–≤—ñ–¥–æ–º–∏—Ç–∏ —Å–≤—ñ–π —Å—Ç–∞–Ω.\n\n"
        "üåô */evening* ‚Äî –≤–µ—á—ñ—Ä–Ω—è —Ä–µ—Ñ–ª–µ–∫—Å—ñ—è. –ó–∞–ø–∏—Ç–∞–Ω–Ω—è, —è–∫—ñ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –¥–µ–Ω—å –∑ –ª—é–±–æ–≤‚Äô—é –¥–æ —Å–µ–±–µ, –∑—Ä–æ–±–∏—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ —ñ –≤—ñ–¥–ø—É—Å—Ç–∏—Ç–∏ –∑–∞–π–≤–µ.\n\n"
        "üìù */note* ‚Äî –¥–æ–¥–∞–π –Ω–æ—Ç–∞—Ç–∫—É –∞–±–æ —Ñ–æ—Ç–æ. –ú–æ–∂–µ—à –∑–±–µ—Ä–µ–≥—Ç–∏ –±—É–¥—å-—è–∫—ñ –¥—É–º–∫–∏, —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è –∞–±–æ –∫–∞–¥—Ä–∏ —Å–≤–æ–≥–æ –¥–Ω—è.\n\n"
        "üìÑ */mydairy* ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ PDF-—Ñ–∞–π–ª —Ç–≤–æ–≥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞. –í—ñ–Ω –±—É–¥–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç–≤–æ—ó –∑–∞–ø–∏—Å–∏, –∫–∞—Ä—Ç–∏, –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ —Ñ–æ—Ç–æ, –æ—Ñ–æ—Ä–º–ª–µ–Ω—ñ –∑ —Ç–∏—Ç—É–ª—å–Ω–æ—é —Å—Ç–æ—Ä—ñ–Ω–∫–æ—é.\n\n"
        "üîÑ */resetprofile* ‚Äî —Å–∫–∏–Ω—É—Ç–∏ —ñ–º‚Äô—è —Ç–∞ –Ω–∞–∑–≤—É —â–æ–¥–µ–Ω–Ω–∏–∫–∞. –Ø–∫—â–æ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å –∞–±–æ –ø–æ—á–∞—Ç–∏ –∑ –Ω—É–ª—è ‚Äî —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è —Ü—ñ—î—é –∫–æ–º–∞–Ω–¥–æ—é.\n\n"
        "üßò */maditation* ‚Äî –º–µ–¥–∏—Ç–∞—Ü—ñ—ó. –£ –º–∞–π–±—É—Ç–Ω—å–æ–º—É —Ç—É—Ç –±—É–¥–µ –ø—Ä–æ—Å—Ç—ñ—Ä –¥–ª—è –∑–∞—Å–ø–æ–∫–æ—î–Ω–Ω—è, –¥–∏—Ö–∞–ª—å–Ω–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ —ñ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–µ–±–µ.\n\n"
        "üßπ */cleardairy* ‚Äî –æ—á–∏—Å—Ç–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–∫. –ó–∞–ª–∏—à–∞—î—Ç—å—Å—è –ª–∏—à–µ —Ç–∏—Ç—É–ª—å–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ ‚Äî –∑—Ä—É—á–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—á–∞—Ç–∫—É.\n\n"
        "üåü –ë–æ—Ç –∑–±–µ—Ä—ñ–≥–∞—î –≤—Å–µ, —â–æ —Ç–∏ –≤–≤–æ–¥–∏—à –ø—Ä–æ—Ç—è–≥–æ–º –¥–Ω—è, —ñ –¥–æ–ø–æ–º–∞–≥–∞—î —Ç–æ–±—ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ—Å–æ–±–ª–∏–≤–∏–π –ø—Ä–æ—Å—Ç—ñ—Ä –¥–ª—è —Å–µ–±–µ.\n"
        "–ü–∏—à–∏, –≤—ñ–¥—á—É–≤–∞–π, —Å–ª—É—Ö–∞–π —Å–µ–±–µ ‚Äî —ñ —Ç–≤—ñ–π –©–æ–¥–µ–Ω–Ω–∏–∫ –Ü–Ω—Ç—É—ó—Ü—ñ—ó —Å—Ç–∞–Ω–µ —Ç–≤–æ—ó–º —Å—É–ø—É—Ç–Ω–∏–∫–æ–º."
    , parse_mode='Markdown')
import random

def card(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    data = load_user_data(user_id)
    today = datetime.now().date().isoformat()

    if data.get("card_date") == today:
        save_user_data(user_id, data)
        update.message.reply_text("üîÆ –¢–∏ –≤–∂–µ –≤–∏—Ç—è–≥–Ω—É–ª–∞ –∫–∞—Ä—Ç—É –¥–Ω—è. –ù–∞—Å—Ç—É–ø–Ω—É –º–æ–∂–Ω–∞ –±—É–¥–µ –∑–∞–≤—Ç—Ä–∞.")
        return

    card = random.choice(CARDS)

    # –í–°–¢–ê–í–ö–ê –¢–£–¢
    filename = os.path.join(DATA_FOLDER, os.path.basename(card['image_url']))
    download_image(card["image_url"], filename)

    context.user_data["last_card"] = {
        "number": card["number"],
        "name": card["name"],
        "image_path": filename
    }

    context.bot.send_photo(
        chat_id=update.message.chat_id,
        photo=open(filename, "rb"),
        caption=f"üìç –ö–∞—Ä—Ç–∞ –¥–Ω—è\n–ù–æ–º–µ—Ä: {card['number']}\n–ù–∞–∑–≤–∞: {card['name']}"
    )
    kyiv_time = datetime.now(pytz.timezone("Europe/Kyiv"))

    data["entries"].append({
        "type": "card_response",
        "content": {
            "number": card["number"],
            "name": card["name"],
            "image": filename,
            "text": ""  # —è–∫—â–æ –Ω–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        },
        "timestamp": kyiv_time.isoformat()
    })
    data["card_date"] = today
    data["card_info"] = card
    save_user_data(user_id, data)
    update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ—ó —ñ–Ω—Å–∞–π—Ç–∏ —â–æ–¥–æ –∫–∞—Ä—Ç–∏:")
    context.user_data["state"] = "card_response"

def morning(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    data = load_user_data(user_id)

    available = list(set(MORNING_QUESTIONS) - set(data["used_morning"]))
    if not available:
        update.message.reply_text("üåû –¢–∏ –≤—ñ–¥–ø–æ–≤—ñ–ª–∞ –Ω–∞ –≤—Å—ñ —Ä–∞–Ω–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è.\n/cleardairy ‚Äî —â–æ–± –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ü–∏–∫–ª.")
        return

    question = random.choice(available)
    data["used_morning"].append(question)
    save_user_data(user_id, data)

    update.message.reply_text(f"‚òÄÔ∏è {question}")
    context.user_data["state"] = "morning_response"
    question = random.choice(available)
    kyiv_time = datetime.now(pytz.timezone("Europe/Kyiv"))

    data["entries"].append({
        "type": "morning",
        "question": question,
        "content": "",
        "timestamp": kyiv_time.isoformat()
    })
    save_user_data(user_id, data)
    context.user_data["current_question"] = question
    
def evening(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    data = load_user_data(user_id)

    available = list(set(EVENING_QUESTIONS) - set(data["used_evening"]))
    if not available:
        update.message.reply_text("üåô –í—Å—ñ –≤–µ—á—ñ—Ä–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ. /cleardairy ‚Äî —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.")
        return

    question = random.choice(available)
    data["used_evening"].append(question)
    save_user_data(user_id, data)

    context.user_data["current_question"] = question
    update.message.reply_text(f"üåô {question}")
    context.user_data["state"] = "evening_response"
    kyiv_time = datetime.now(pytz.timezone("Europe/Kyiv"))

    data["entries"].append({
        "type": "evening",
        "question": question,
        "content": "",
        "timestamp": kyiv_time.isoformat()
    })
    save_user_data(user_id, data)
from telegram import InputMediaPhoto
from telegram.ext import MessageHandler, Filters
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.utils import ImageReader
from PIL import Image
from textwrap import wrap

def note(update: Update, context: CallbackContext):
    update.message.reply_text("‚úçÔ∏è –ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç –∞–±–æ —Ñ–æ—Ç–æ ‚Äî —è –∑–±–µ—Ä–µ–∂—É —Ü–µ —É —â–æ–¥–µ–Ω–Ω–∏–∫—É.")
    context.user_data["state"] = "note_entry"

def save_image(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    photo = update.message.photo[-1].get_file()
    img_path = os.path.join(DATA_FOLDER, f"{user_id}_{photo.file_id}.jpg")
    photo.download(img_path)
    add_entry(user_id, "image", img_path)
    update.message.reply_text("üì∏ –§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")

def maditation(update: Update, context: CallbackContext):
    keyboard = [
        [KeyboardButton("üßò –°–ø–æ–∫—ñ–π"), KeyboardButton("‚ú® –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è")],
        [KeyboardButton("üî• –ù–∞—Ç—Ö–Ω–µ–Ω–Ω—è"), KeyboardButton("üåä –ü–æ—Ç—ñ–∫")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text("üßò –û–±–µ—Ä–∏ –º–µ–¥–∏—Ç–∞—Ü—ñ—é (–Ω–µ–∑–∞–±–∞—Ä–æ–º –±—É–¥—É—Ç—å –∞–∫—Ç–∏–≤–Ω—ñ):", reply_markup=reply_markup)

def cleardairy(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    data = load_user_data(user_id)
    title = data["title"]
    name = data["name"]

    # –æ—á–∏—â–∞—î–º–æ –≤—Å–µ –∫—Ä—ñ–º —Ç–∏—Ç—É–ª–∫–∏
    new_data = {
        "name": name,
        "title": title,
        "entries": [],
        "used_morning": [],
        "used_evening": [],
        "card_date": "",
        "card_info": {}
    }
    save_user_data(user_id, new_data)
    update.message.reply_text("üóë –©–æ–¥–µ–Ω–Ω–∏–∫ –æ—á–∏—â–µ–Ω–æ (—Ç–∏—Ç—É–ª—å–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞).")
def check_space(canvas, y, required_height, bg, width, height, margin):
    if y - required_height < margin:
        canvas.showPage()
        canvas.drawImage(bg, 0, 0, width=width, height=height)
        return height - margin  # –Ω–æ–≤–∏–π y –ø—ñ—Å–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É
    return y  # –∑–∞–ª–∏—à–∞—î –ø–æ—Ç–æ—á–Ω–∏–π y 
import textwrap

def estimate_text_height(text, max_width_chars=90, font_size=14, line_spacing=2):
    """
    –û—Ü—ñ–Ω—é—î –≤–∏—Å–æ—Ç—É —Ç–µ–∫—Å—Ç—É –≤ –ø—ñ–∫—Å–µ–ª—è—Ö –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ –≤–º—ñ—Å—Ç–∏—Ç—å—Å—è –≤—ñ–Ω –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ.
    –ü–∞—Ä–∞–º–µ—Ç—Ä max_width_chars ‚Äî —Ü–µ —Å–∫—ñ–ª—å–∫–∏ —Å–∏–º–≤–æ–ª—ñ–≤ —É —Ä—è–¥–æ–∫ –ø—Ä–∏ –ø–æ—Ç–æ—á–Ω–æ–º—É —à—Ä–∏—Ñ—Ç—ñ.
    """
    paragraphs = text.split("\n")
    total_lines = 0
    for paragraph in paragraphs:
        wrapped = textwrap.wrap(paragraph, width=max_width_chars)
        total_lines += len(wrapped) + 1  # +1 ‚Äî —Ü–µ –≤—ñ–¥—Å—Ç—É–ø –º—ñ–∂ –∞–±–∑–∞—Ü–∞–º–∏
    line_height = font_size + line_spacing
    return total_lines * line_height
def draw_wrapped_text(canvas, text, x, y, max_width, line_height, font_name="DejaVu", font_size=14):
    canvas.setFont(font_name, font_size)
    words = text.split()
    line = ""
    for word in words:
        test_line = line + word + " "
        if canvas.stringWidth(test_line, font_name, font_size) < max_width:
            line = test_line
        else:
            canvas.drawString(x, y, line.strip())
            y -= line_height
            line = word + " "
    if line:
        canvas.drawString(x, y, line.strip())
        y -= line_height
    return y  # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–æ–≤—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
def mydairy(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    data = load_user_data(user_id)  # –ü—Ä–∞–≤–∏–ª—å–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    pdf_path = os.path.join(PDF_FOLDER, f"dairy_{user_id}.pdf")

    c = canvas.Canvas(pdf_path, pagesize=A4)
    width, height = A4
    margin = 50
    max_width = width - 2 * margin

    pdfmetrics.registerFont(TTFont("DejaVu", FONT_PATH))

    # —Ç–∏—Ç—É–ª—å–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
    bg = ImageReader(BACKGROUND_IMAGE)
    c.drawImage(bg, 0, 0, width, height)
    c.setFont("DejaVu", 30)
    c.drawCentredString(width / 2, height - 100, data["title"])
    c.setFont("DejaVu", 20)
    c.drawCentredString(width / 2, height - 140, f"–ê–≤—Ç–æ—Ä: {data['name']}")
    c.setFont("DejaVu", 16)
    c.drawCentredString(width / 2, height - 180, f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d')}")
    c.showPage()

    # –≤–º—ñ—Å—Ç
    y = height - margin
    c.drawImage(bg, 0, 0, width, height)
    c.setFont("DejaVu", 16)

    for entry in data["entries"]:
        if entry["type"] == "note":
            # –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –º—ñ—Å—Ü–µ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ—é –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫—É
            if y < 150:
                c.showPage()
                c.drawImage(bg, 0, 0, width, height)
                y = height - margin
            timestamp = format_datetime_ukr(datetime.fromisoformat(entry["timestamp"]))
            c.setFont("DejaVu", 14)
            c.drawString(margin, y, f"{timestamp}")
            y -= 24

            c.setFont("DejaVu", 16)
            c.drawString(margin, y, "‚úèÔ∏è –ù–æ—Ç–∞—Ç–∫–∞:")
            y -= 24

            lines = entry["content"]
            full_text = text
            required_height = estimate_text_height(full_text)
            y = check_space(c, y, required_height, bg, width, height, margin)
            y = draw_wrapped_text(c, full_text, margin, y, max_width=500, line_height=20)
            y -= 10

            if y < 100:
                c.showPage()
                c.drawImage(bg, 0, 0, width, height)
                c.setFont("DejaVu", 14)
                y = height - margin

            draw_wrapped_text(
                c, full_text,
                x=margin,
                y=y,
                max_width=width - 2 * margin,
                font_size=14,
                line_height=20
            )

            lines_count = len(full_text) // 70 + full_text.count("\n")
            y -= lines_count * 18 + 10

        elif entry["type"] == "image":
            if os.path.exists(entry["content"]):
                timestamp = format_datetime_ukr(datetime.fromisoformat(entry["timestamp"]))
                c.setFont("DejaVu", 14)
                c.drawString(margin, y, f"{timestamp}")
                y -= 24
                img = Image.open(entry["content"])
                img.thumbnail((400, 400))
                img_width, img_height = img.size
                if y < img_height + 60:
                    c.showPage()
                    c.drawImage(bg, 0, 0, width, height)
                    y = height - margin
                x = (width - img_width) / 2
                c.drawImage(entry["content"], x, y - img_height, img_width, img_height)
                y -= img_height + 30

        elif entry["type"] == "card_response":
            # –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –º—ñ—Å—Ü–µ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ—é –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫—É
            if y < 150:
                c.showPage()
                c.drawImage(bg, 0, 0, width, height)
                y = height - margin
            timestamp = format_datetime_ukr(datetime.fromisoformat(entry["timestamp"]))
            c.setFont("DejaVu", 14)
            c.drawString(margin, y, f"{timestamp}")
            y -= 24
            c.setFont("DejaVu", 14)
            c.drawString(margin, y, "üîÆ –Ü–Ω—Å–∞–π—Ç –¥–æ –∫–∞—Ä—Ç–∏ –¥–Ω—è:")
            y -= 24

            if "image" in entry["content"] and os.path.exists(entry["content"]["image"]):
                img = Image.open(entry["content"]["image"])
                img.thumbnail((400, 400))
                img_width, img_height = img.size
                if y < img_height + 60:
                    c.showPage()
                    c.drawImage(bg, 0, 0, width, height)
                    y = height - margin
                x = (width - img_width) / 2
                c.drawImage(entry["content"]["image"], x, y - img_height, img_width, img_height)
                y -= img_height + 30

            card_name = entry["content"].get("name", "")
            card_number = entry["content"].get("number", "")
            c.setFont("DejaVu", 14)
            c.drawString(margin, y, f"–ö–∞—Ä—Ç–∞: {card_name} (‚Ññ{card_number})")
            y -= 24

            full_text = f"–ö–∞—Ä—Ç–∞: {card_name} (‚Ññ{card_number})\n\n–Ü–Ω—Å–∞–π—Ç:\n{text}"
            required_height = estimate_text_height(full_text)
            y = check_space(c, y, required_height, bg, width, height, margin)
            y = draw_wrapped_text(c, full_text, margin, y, max_width=500, line_height=20)
            y -= 10
            if y < 100:
                c.showPage()
                c.drawImage(bg, 0, 0, width, height)
                c.setFont("DejaVu", 14)
                y = height - margin

            y = draw_wrapped_text(c, full_text, x=margin, y=y, max_width=500, line_height=20)
            y -= 10  # —Ç—ñ–ª—å–∫–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –≤—ñ–¥—Å—Ç—É–ø, —è–∫—â–æ —Ö–æ—á–µ—à

        elif entry["type"] == "morning_answer":
            # –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –º—ñ—Å—Ü–µ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ—é –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫—É
            if y < 150:
                c.showPage()
                c.drawImage(bg, 0, 0, width, height)
                y = height - margin
            timestamp = format_datetime_ukr(datetime.fromisoformat(entry["timestamp"]))
            c.setFont("DejaVu", 14)
            c.drawString(margin, y, f"{timestamp}")
            y -= 24
            c.setFont("DejaVu", 14)
            c.drawString(margin, y, "‚òÄÔ∏è –†–∞–Ω–∫–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:")
            y -= 24
            question = entry["content"].get("question", "")
            answer = entry["content"].get("text", "")
            full_text = f"{question}\n\n–í—ñ–¥–ø–æ–≤—ñ–¥—å:\n{answer}"
            required_height = estimate_text_height(full_text)
            y = check_space(c, y, required_height, bg, width, height, margin)
            y = draw_wrapped_text(c, full_text, margin, y, max_width=500, line_height=20)
            y -= 10
            if y < 100:
                c.showPage()
                c.drawImage(bg, 0, 0, width, height)
                c.setFont("DejaVu", 14)
                y = height - margin

            y = draw_wrapped_text(c, full_text, x=margin, y=y, max_width=500, line_height=20)
            y -= 10  # —Ç—ñ–ª—å–∫–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –≤—ñ–¥—Å—Ç—É–ø, —è–∫—â–æ —Ö–æ—á–µ—à

        elif entry["type"] == "evening_answer":
            # –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –º—ñ—Å—Ü–µ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ—é –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫—É
            if y < 150:
                c.showPage()
                c.drawImage(bg, 0, 0, width, height)
                y = height - margin
            timestamp = format_datetime_ukr(datetime.fromisoformat(entry["timestamp"]))
            c.setFont("DejaVu", 14)
            c.drawString(margin, y, f"{timestamp}")
            y -= 24
            c.setFont("DejaVu", 14)
            c.drawString(margin, y, "üåô –í–µ—á—ñ—Ä–Ω—è —Ä–µ—Ñ–ª–µ–∫—Å—ñ—è:")
            y -= 24
            question = entry["content"].get("question", "")
            answer = entry["content"].get("text", "")
            full_text = f"{question}\n\n–í—ñ–¥–ø–æ–≤—ñ–¥—å:\n{answer}"
            required_height = estimate_text_height(full_text)
            y = check_space(c, y, required_height, bg, width, height, margin)
            y = draw_wrapped_text(c, full_text, margin, y, max_width=500, line_height=20)
            y -= 10
            if y < 100:
                c.showPage()
                c.drawImage(bg, 0, 0, width, height)
                c.setFont("DejaVu", 14)
                y = height - margin

            y = draw_wrapped_text(c, full_text, x=margin, y=y, max_width=500, line_height=20)
            y -= 10  # —Ç—ñ–ª—å–∫–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –≤—ñ–¥—Å—Ç—É–ø, —è–∫—â–æ —Ö–æ—á–µ—à

    c.save()

    if os.path.exists(pdf_path):
        update.message.reply_document(
            document=open(pdf_path, "rb"),
            filename="–©–æ–¥–µ–Ω–Ω–∏–∫_–Ü–Ω—Ç—É—ó—Ü—ñ—ó.pdf"
        )
    else:
        update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ PDF.")
     
def handle_response(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    text = update.message.text
    state = context.user_data.get("state")

    if state == "card_response":
        last_card = context.user_data.get("last_card")
        if last_card:
            data = load_user_data(user_id)
            for entry in reversed(data["entries"]):
                if entry["type"] == "card_response":
                    entry["content"]["text"] = text
                    break
            save_user_data(user_id, data)
            context.user_data["state"] = None
            update.message.reply_text("‚úÖ –Ü–Ω—Å–∞–π—Ç –¥–æ –∫–∞—Ä—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")

    elif state == "morning_response":
        question = context.user_data.get("current_question", "")
        add_entry(user_id, "morning_answer", {
            "question": question,
            "text": text
        })
        context.user_data["state"] = None
        update.message.reply_text("‚úÖ –†–∞–Ω–∫–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–±–µ—Ä–µ–∂–µ–Ω–∞!")

    elif state == "evening_response":
        question = context.user_data.get("current_question", "")
        add_entry(user_id, "evening_answer", {
            "question": question,
            "text": text
        })
        context.user_data["state"] = None
        update.message.reply_text("‚úÖ –í–µ—á—ñ—Ä–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–±–µ—Ä–µ–∂–µ–Ω–∞!")

    elif state == "note_entry":
            # –†–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—è–¥–∫–∏ –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º
        lines = text.split('\n')
        add_entry(user_id, "note", lines)
        context.user_data["state"] = None
        update.message.reply_text("‚úÖ –ù–æ—Ç–∞—Ç–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞!")

    else:
        handle_text(update, context)

def main():
    TOKEN = "8117433230:AAEJ2OXuMBtca7bBi1SD0d9sbpp2osG-GSM"
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("Card", card))
    dp.add_handler(CommandHandler("Morning", morning))
    dp.add_handler(CommandHandler("Evening", evening))
    dp.add_handler(CommandHandler("Note", note))
    dp.add_handler(CommandHandler("maditation", maditation))
    dp.add_handler(CommandHandler("Mydairy", mydairy))
    dp.add_handler(CommandHandler("Cleardairy", cleardairy))
    dp.add_handler(MessageHandler(Filters.photo, save_image))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_response))
    dp.add_handler(CommandHandler("resetprofile", reset_profile))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
